// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  createdAt     DateTime  @default(now()) @map("created_at")
  accounts      Account[]
  sessions      Session[]
  guesses       Guess[]
  userStats     UserStats?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Guess {
  id        Int     @id @default(autoincrement())
  userId    String  @map("user_id")
  score     Int
  gameId    String? @map("game_id")
  isWinner  Boolean @default(false) @map("is_winner")
  createdAt DateTime @default(now()) @map("created_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
  @@map("guesses")
}

model UserStats {
  id            Int @id @default(autoincrement())
  userId        String @unique @map("user_id")
  totalGames    Int @default(0) @map("total_games")
  totalWins     Int @default(0) @map("total_wins")
  bestScore     Int? @map("best_score")
  lastPlayed    DateTime? @map("last_played")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_stats")
}

model TeamScore {
  id    Int @id @default(autoincrement())
  score Int @default(0)
}

model TotalPlayers {
  id    Int @id @default(autoincrement())
  value Int @default(1)
}

model GameTimer {
  id         Int      @id @default(autoincrement())
  targetDate DateTime // Target date and time for countdown (stored in UTC)
  isActive   Boolean  @default(false)
  updatedAt  DateTime @updatedAt
}
